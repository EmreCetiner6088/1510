let currentMessageIndex = 0;
let currentCharIndex = 0;
let typingInterval;
let isTyping = false;  // Takip ederiz, yazma iÅŸlemi devam ediyor mu?

const messages = [
    "Hey !",
    "Merhaba Esma, ben Emre ile senin gelecekteki kedin",
    "Evet, doÄŸru duydun senin gelecekteki kedinim!",
    "Emre, zamanlar arasÄ± bir yolculuk yapÄ±p beni buraya hapsetti",
    "Bunu neden mi yaptÄ±? Sana gelecekten haberler vermem iÃ§in!",
    "Haince!, deÄŸil mi?",
    "Ã‡ok deÄŸil iÅŸim bitince beni geri bÄ±rakÄ±p yaÅŸ mama vericeÄŸini sÃ¶yledi",
    "Neyse, seni daha fazla merakta bÄ±rakmadan baÅŸlayayÄ±m",
    "Åžu anda sÄ±nav dÃ¶nemindesin, deÄŸil mi?",
    "Harika bir ÅŸekilde Ã§alÄ±ÅŸmaya devam et",
    "Ã‡Ã¼nkÃ¼ bu tempoyla Emre ile aynÄ± Ã¼niversiteye gidiyorsun",
    "GeleceÄŸin bÃ¶yle ÅŸekilleniyor...",
    "Ã‡Ä±lgÄ±nca deÄŸil mi",
    "SonrasÄ±nda Ã¼niversite yÄ±llarÄ±nda bolca vakit geÃ§iriyorsunuz",
    "AranÄ±zdaki baÄŸ gÃ¼nden gÃ¼ne daha da artÄ±yor",
    "Evleniyorsunuz, Ã§ocuk sahibi oluyorsunuz... Ve tabi ki beni sahipleniyorsunuz",
    "Daha fazla anlatsam mÄ± acaba ?",
    "SanÄ±rÄ±m bir yaÅŸ mama iÃ§in fazla konuÅŸtum ðŸ˜¼",
    "Åžimdilik bu kadar yeter",
    "Gelecekte gÃ¶rÃ¼ÅŸmek Ã¼zere Esma"
];

// Function to type the message letter by letter
function typeMessage(message, complete = false) {
    // EÄŸer yazma iÅŸlemi devam ediyorsa, Ã¶ncekini durduruyoruz
    if (isTyping) {
        clearInterval(typingInterval);
    }

    document.getElementById("speech-text").innerText = ""; // Clear speech bubble before starting
    currentCharIndex = 0; // Start from the beginning of the message

    // If 'complete' is true, type the entire message immediately
    if (complete) {
        document.getElementById("speech-text").innerText = message;
        currentCharIndex = message.length;
        if (currentCharIndex === message.length) {
            isTyping = false;  // Typing is finished

            // After the last sentence, redirect to main.html
            if (currentMessageIndex === messages.length) {
                window.location.href = "main.html";
            }
        }
        isTyping = false;  // Typing is finished
    } else {
        isTyping = true;  // Typing has started
        typingInterval = setInterval(() => {
            document.getElementById("speech-text").innerText += message[currentCharIndex];
            currentCharIndex++;

            // When the message is complete, stop typing
            if (currentCharIndex === message.length) {
                clearInterval(typingInterval);
                isTyping = false;  // Typing is finished

                // After the last sentence, redirect to main.html
                if (currentMessageIndex === messages.length) {
                    window.location.href = "main.html";
                }
            }
        }, 70); // Typing delay of 100ms per character
    }
}

// When login button is clicked, check password and start the main screen
document.getElementById("login-btn").addEventListener("click", function() {
    const password = document.getElementById("password").value;
    if (password === "1510") {
        document.getElementById("login-screen").style.display = "none";
        document.getElementById("main-screen").style.display = "block";
        // Start typing the first message
        typeMessage(messages[currentMessageIndex]);
        currentMessageIndex++;
    } else {
        alert("YanlÄ±ÅŸ ÅŸifre!");
    }
});

// When the next button is clicked
document.getElementById("next-btn").addEventListener("click", function () {
    if (isTyping) {
        // If typing is in progress, stop typing and complete the current sentence
        typeMessage(messages[currentMessageIndex - 1], true);  // Complete the current message immediately
    } else {
        // Clear the speech bubble and move to the next sentence
        document.getElementById("speech-text").innerText = "";  // Clear previous message
        if (currentMessageIndex < messages.length) {
            // Start typing the next sentence
            typeMessage(messages[currentMessageIndex]);
            currentMessageIndex++;
            console.log(currentMessageIndex);
        }
    }
});
